#!/bin/bash

set -e

# 이미지 체크
check_and_pull() {
    local image_name=$1
    local tag=$2
    local full_image="${image_name}:${tag}"

    echo "${full_image} 이미지 확인 및 다운로드"
    # 이미지와 태그를 조합하여 전체 이미지 이름 확인
        if docker images | awk -v img="$image_name" -v tag="$tag" '$1==img && $2==tag {print $1":"$2}' | grep -q "$full_image"; then
            echo "${full_image}가 이미 존재합니다."
        else
            echo "${full_image}가 존재하지 않습니다. ${full_image} 다운로드합니다..."
            docker pull ${full_image} || { echo "Error: ${full_image}를 가져오는데 실패했습니다."; exit 1; }
        fi
}

# docker hub에서 제공하는 필요한 이미지 확인 및 다운로드
step1() {
    echo "Step1: docker hub에서 제공하는 필요한 이미지 확인 및 다운로드"
    # 이미지 목록
    IMAGES=("mysql" "redis")
    TAGS=("8.0" "7.2-alpine")

    for i in "${!IMAGES[@]}"; do
        check_and_pull "${IMAGES[$i]}" "${TAGS[$i]}"
    done
}

# 프로젝트 관련 최신 이미지 파일 불러오기
step2() {
    echo "Step2: 프로젝트 관련 최신 이미지 파일 불러오기"
    REPOSITORY="seongolee/climbing-day-member"
    tag="latest"

    docker pull ${REPOSITORY}:${tag}
}

main() {
    docker compose down && docker image prune -f && docker volume prune -f
    step1
    step2
    echo "Docker image 설정이 정상적으로 완료되었습니다."
    docker compose up -d
    echo "서버가 정상적으로 실행되었습니다."
}

main
